alias functionNum R1;
alias PID R2;

if(functionNum == 1) then
	alias freeIndex R6;
	freeIndex = 0;
	while(freeIndex < 16) do
		if([PROCESS_TABLE + freeIndex*16 + 4] == TERMINATED) then
			break;
		endif;
		freeIndex = freeIndex + 1;
	endwhile;
	if(freeIndex == 16) then
		R0 = -1;
		return;
	endif;
	[PROCESS_TABLE + freeIndex*16 + 4] = ALLOCATED;
	[PROCESS_TABLE + freeIndex*16 + 1] = freeIndex;
	[PROCESS_TABLE + freeIndex*16 + 14] = PAGE_TABLE_BASE + freeIndex*20;
	[PROCESS_TABLE + freeIndex*16 + 15] = 10;
	R0 = freeIndex;
	return;
endif;

if(functionNum == 2) then
	multipush(R1,R2);
	R1 = 2;
	R2 = [PROCESS_TABLE + PID*16 + 11];
	call MOD_2;
	multipop(R1,R2);
	return;
endif;

if(functionNum == 3) then
	if([PROCESS_TABLE + PID*16 + 9]!=9)
	then
		alias counter R9;
		counter = 0;
		while(counter<16)
		do
			if(([PROCESS_TABLE + counter*16 + 4]==WAIT_PROCESS) && ([PROCESS_TABLE + counter*16 + 5]==PID))
			then
				[PROCESS_TABLE + counter*16 + 4] = READY;
			endif;
			if([PROCESS_TABLE + counter*16 + 2]==PID)
			then
				[PROCESS_TABLE + counter*16 + 2] = -1;
			endif;
			counter = counter + 1;
		endwhile;
	endif;
	multipush(R1,R2);
	R1 = 4;
	R2 = PID;
	call MOD_1;
	multipop(R1,R2);
	multipush(R1,R2);
	R1 = 2;
	R2 = PID;
	call MOD_1;
	multipop(R1,R2);
	[PROCESS_TABLE + PID*16 + 4] = TERMINATED;
	return;
endif;

if(functionNum == 4) then

	PTBR = PAGE_TABLE_BASE + R2*20;
	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";
	if([PTBR + 4] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 4];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 4] = -1;
		[PTBR + 5] = "0000";
	endif;
	if([PTBR + 6] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 6];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 6] = -1;
		[PTBR + 7] = "0000";
	endif;
	if([PTBR + 8] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 8];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 8] = -1;
		[PTBR + 9] = "0000";
	endif;
	if([PTBR + 10] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 10];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 10] = -1;
		[PTBR + 11] = "0000";
	endif;
	if([PTBR + 12] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 12];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 12] = -1;
		[PTBR + 13] = "0000";
	endif;
	if([PTBR + 14] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 14];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 14] = -1;
		[PTBR + 15] = "0000";
	endif;
	if([PTBR + 16] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 16];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 16] = -1;
		[PTBR + 17] = "0000";
	endif;
	if([PTBR + 18] != -1) then
		multipush(R1,R2);
		R1 = 2;
		R2 = [PTBR + 18];
		call MOD_2;
		multipop(R1,R2);
		[PTBR + 18] = -1;
		[PTBR + 19] = "0000";
	endif;

	if([DISK_MAP_TABLE + PID*10 + 2] != -1) then
		multipush(R1,R2,R3,R4);
		R1 = 4;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + PID*10 + 2];
		//call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;
	
	if([DISK_MAP_TABLE + PID*10 + 3] != -1) then
		multipush(R1,R2,R3,R4);
		R1 = 4;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + PID*10 + 3];
		//call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;

	if([DISK_MAP_TABLE + PID*10 + 8] != -1) then
		multipush(R1,R2,R3,R4);
		R1 = 4;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + PID*10 + 8];
		//call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;

	if([DISK_MAP_TABLE + PID*10 + 9] != -1) then
		multipush(R1,R2,R3,R4);
		R1 = 4;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + PID*10 + 9];
		//call MOD_2;
		multipop(R1,R2,R3,R4);
	endif;

	alias counter R6;

	counter = 0;

	while(counter < 10) do
		[DISK_MAP_TABLE + PID*10 + counter] = -1;
		counter = counter + 1;
	endwhile;

	return;
endif;
