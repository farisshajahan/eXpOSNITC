// ===============Switching to kernel mode==================

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
alias userSP R3;
userSP = SP;

breakpoint;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512-1;

// ===================Mode = exec==========================

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

// ====================Get filename=======================

alias fileName R1;
fileName = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 4)/ 512] * 512 + ((userSP - 4) % 512)];

// ====================Get inode index===================

alias counter R4;
counter = 0;
while(counter <= 59) do
	if(([INODE_TABLE + counter*16 + 1] == fileName) && ([INODE_TABLE + counter*16 + 0] == EXEC)) then
		break;
	else
		counter = counter + 1;
	endif;
endwhile;

// ========================File not found, then===========================

if(counter == 60) then
	[[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2 * (userSP - 1)/ 512] * 512 + ((userSP - 1) % 512)] = -1;
	SP = userSP;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
	ireturn;
endif;

// ========================File found, then===============================

multipush(R1,R2,R3,R4);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R1,R2,R3,R4);
alias pageNum R5;
pageNum = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];
[MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
SP = pageNum*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = counter;

PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20;

[PTBR + 1] = "0100";
[PTBR + 3] = "0100";
[PTBR + 0] = 63;
[PTBR + 2] = 64;

multipush(R1,R2,R3,R4,R5);

// =================Stack Allocation=================

R1 = 1;
call MOD_2;
[PTBR + 16] = R0;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=R0;
[PTBR + 17] = "0110";

call MOD_2;

[PTBR + 18] = R0;
[PTBR + 19] = "0110";

// ================Heap Allocation===================

// ------Invalidating heap------

[PTBR+4] = -1;
[PTBR+5] = "0000";

[PTBR+6] = -1;
[PTBR+7] = "0000";

// ============Code Blocks Allocation================

[PTBR+8] = -1;
[PTBR+9] = "0000";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

multipop(R1,R2,R3,R4,R5);

alias noOfBlocks R6;
noOfBlocks = [INODE_TABLE + counter*16 + 2]/512 + 1;

multipush(R1,R2,R3,R4,R5,R6);

multipush(R0,R1,R2,R3,R4,R5,R6);
R1 = 5;
R2 = [INODE_TABLE + counter*16 + 8];
call MOD_2;
[PTBR+8] = R0;
[PTBR+9] = "0100";
multipop(R0,R1,R2,R3,R4,R5,R6);

noOfBlocks = noOfBlocks - 1;

[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 0] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 1] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + counter*16 + 8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + counter*16 + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + counter*16 + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + counter*16 + 11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

multipop(R1,R2,R3,R4,R5,R6);

[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = 8*512;
SP = 8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
PTLR = 10;
PTBR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 14];
ireturn;
